"""
Django settings for lenta project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta
from kombu import Queue, Exchange

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e#xnf*&fh%sesm*w-m)5pd($8ogm^*%*&h68&82(d!*v4__55#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djcelery',
    'digest',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lenta.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lenta.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'lenta',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# RSS
RSS_URL = 'https://lenta.ru/rss/news'
RSS_VERSIONS_SUPPORT = ('rss20', )
RSS_GRAB_TIMEOUT = 60  # seconds

# Celery [broker]
CELERY_TIMEZONE = 'Europe/Moscow'

BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Celery [queue]
CELERY_DEFAULT_QUEUE = 'normal'
CELERY_QUEUES = (
    Queue('normal', Exchange('normal'), routing_key='normal'),
    Queue('high', Exchange('high'), routing_key='high'),
)

CELERY_ROUTES = {
    # High priority
    'digest.tasks.send': {'queue': 'high'},
}

# Celery [periodic tasks]
CELERYBEAT_SCHEDULE = {
    'grab-lenta-digest': {
        'task': 'digest.tasks.grab',
        'schedule': timedelta(seconds=RSS_GRAB_TIMEOUT),
        'args': (RSS_URL, RSS_VERSIONS_SUPPORT, )
    },
}

# Django-celery [result]
CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

# Logging
CELERYD_HIJACK_ROOT_LOGGER = False

file_handler = {
    'class': 'logging.handlers.RotatingFileHandler',
    'filename': os.path.join(BASE_DIR, '../app.log'),
    'maxBytes': 1024 * 1024 * 1,  # 1 Mb
    'backupCount': 2,
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'app_console': {
            'class': 'logging.StreamHandler',
        },
        'app_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../app.log'),
            'maxBytes': 1024 * 1024 * 1,  # 1 Mb
            'backupCount': 2,
        },
        'celery_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../celery.log'),
            'maxBytes': 1024 * 1024 * 1,  # 1 Mb
            'backupCount': 2,
        },
        'celery_task_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../celery.task.log'),
            'maxBytes': 1024 * 1024 * 1,  # 1 Mb
            'backupCount': 2,
        },
    },
    'loggers': {
        'celery': {
            'handlers': ['celery_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['celery_task_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['app_console', 'app_file'],
            'level': 'ERROR',
            'propagate': True,
        },

    }
}
